grupo para organização --> OK
fetch lazy --> OK
dto e mapeamento das unidades --> OK
resource e services do marathon --> OK


Os DTOs são divididos em Response e Request para otimizar a comunicação de dados e garantir a segurança da sua API. Em resumo, é sobre dar e receber só o que é preciso, mantendo a API limpa, segura e flexível.
 -- DTO de Request (Entrada): Recebe apenas os dados necessários para uma ação (criar ou atualizar algo). Ele filtra campos que o usuário não deveria enviar (como IDs gerados pelo sistema, timestamps, etc.).
 -- DTO de Response (Saída): Envia de volta ao cliente apenas os dados relevantes após uma ação. Ele pode formatar os dados de forma diferente da entidade do banco e omitir informações sensíveis que não devem ser expostas.


SonarCloud: https://sonarcloud.io/project/overview?id=williamantoniazzi_spring-rest-data-security


Avaliações.
DTO entre transição do controller e entity para evitar que correction.
estudar jasonpath avaliar em testes em MarathonResourceTest.

Nem tudo precisa testar testes diretamente, exemplo package config.
ModelMapper faz relação entidade e DTO
Excluir package da análise de cobertura. Add em Pom.File, DTO, ENUNS, Exceptions e entidades são validadas por converter repository e services, são avalidadas indiretamente.
>>> O que é relevante testar??? converter repository e services, resources

Tarefas.
> Pipeline com análise estática e execução do teste de unidade com cobertura do sonar -- OK, .github/workflows/sonarci.yml
> Resolver 5 itens de confiabilidade (realiability)
> Resolver todos itens médios menos campos de rename, maintainability.



